#!/bin/bash

set -e

RSETUP_INTERACTIVE=0

source /lib/rsetup/utils.sh
source /lib/rsetup/block_helpers.sh

_first-boot() {
    # Regenerate SSH hostkey
    dpkg-reconfigure -f noninteractive openssh-server

    local ROOT_DEV=$(_get_root_dev)
    local PART_ENTRY_NUMBER=$(udevadm info --query=property --name=$ROOT_DEV | grep '^ID_PART_ENTRY_NUMBER=' | cut -d'=' -f2)
    local PART_TABLE_TYPE=$(udevadm info --query=property --name=$ROOT_DEV | grep '^ID_PART_TABLE_TYPE=' | cut -d'=' -f2)
    local BLOCK_DEV=$(_get_block_dev)

    # Fix GPT second partition table (should be at the end of the block device)
    if [[ $PART_TABLE_TYPE == "gpt" ]]
    then
        sgdisk -e $BLOCK_DEV
        partprobe
    fi

    # Resize our root partition
    cat << EOF | parted ---pretend-input-tty $BLOCK_DEV
resizepart ${PART_ENTRY_NUMBER} 
yes
100%
EOF
    partprobe
    resize2fs $ROOT_DEV

    # Disable ourselves
    systemctl disable rsetup-first-boot.service
}

_create-systemconf() {
    _parameter_count_check 1 "$@"

    cat << EOF >/boot/.system.conf
#
# DO NOT EDIT THIS FILE
#
# Incorrect value in this file will make system unbootable
#

rootuuid=$(blkid --output value --match-tag UUID $(_get_root_dev))
EOF
}

update-bootloader() {
    _parameter_count_check 1 "$@"
    _assert_f "/usr/lib/u-boot-$1/setup.sh"

    local DEVICE=$(_get_block_dev)

    "/usr/lib/u-boot-$1/setup.sh" update_bootcmd
    "/usr/lib/u-boot-$1/setup.sh" update_bootloader $DEVICE
}

if (( $# == 0 )) || [[ $1 == main ]]
then
    main
else
    if [[ $(type -t $1) == function ]]
    then
        "$@"
    else
        echo $1 is not a valid function.
    fi
fi
